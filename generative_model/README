2025 Christopher Lang <christopher.lang.256@gmail.com>

Generative image models for creating abitrarily large paper textures for use in
Krita plugin. My contribution to Cambridge G400 Part IB group Project.


WHAT I HAVE IMPLEMENTED
-----------------------

First, I tried to use maximum likelihood estimation to find best perlin noise
parameters for modeling a paper texture. I found that computing exact likelihood
is intractable. It might be possible to put a lower bound on likelihood and
optimize for this, but I have not tried this.

Then, I tried a patch-based method of my own invention. Results were not great
but got us some preliminary results we could fall back on if machine learning
methods did not work out.


DIFFUSION MODELS

Ho 2020: DDPM [4]
  I did not fully implement this since the network involved was quite complex.
  But I tried using convolutional networks and fully connected network but
  neither gave decent result. In addition, it did not seem that it would work
  well for scaling up the images.


ADVERSARIAL MODELS

Goodfellow 2014: GAN [1]
  Implemented this and ran on MNIST digits. Worked alright but output images
  were a bit noisy. Needed to run on AWS compute.
Radford 2016: DCGAN [2]
  Implemented this and ran on MNIST digits. Rsults better than GAN. When I
  naievly tried to scale up the input tensor for generative CNN, the output
  image did not look like a proper texture.
Jetchev 2017: SGAN [3]
  This is a simple extension of Radford 2016 [2] that enables us to scale
  up the generated image to abitrary size. This is essential for texture
  generation.


FILES
-----

sgan_models.py
  Pytorch SGAN4 models based on Jetchev 2017 [3].
patch_dataset.py
  Pytorch dataset which opens an image and takes square samples of from it.
  Optionally applies some preprocessing to make squares look more similar to
  eachother, e.g. rescaling for constant mean.
train.py
  Trains the SGAN on an input image. You'll want to run this on a cuda enabled
  device.
generate.py
  Generates an image using a trained generator model. This will run quite
  quickly even without a GPU.
aws-*.sh aws-spot-config.json
  Some scripts I wrote to help me create an AWS EC2 spot instance. I used these
  instances to train my models.
examples/*-train.*
  Some example images I trained a model on.
examples/*-*_iterations.png
  Some example images I generated with a model.



REFERENCES
----------

[1] Goodfellow 2014 Generative Adversarial Networks
    https://arxiv.org/abs/1406.2661
[2] Radford 2016 Unsupervised Representation Learning with Deep Convolutional
    Generative Adversarial Networks
    https://arxiv.org/abs/1511.06434
[3] Jetchev 2017 Texture Synthesis with Spatial Generative Adversarial Networks
    https://arxiv.org/abs/1611.08207
[4] Ho 2020 Denoising Diffusion Probabilistic Models
    https://arxiv.org/abs/2006.11239
